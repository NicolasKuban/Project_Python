#-------------------------------------------------------------------------------
# Name:        module1
# Purpose:
#
# Author:      Пользователь
#
# Created:     25.08.2022
# Copyright:   (c) Пользователь 2022
# Licence:     <your licence>
#-------------------------------------------------------------------------------

# Подключаем модуль для генерирования случайных чисел
import random

# Функция для отображения содержимого списака
# Аргумент функции - отображаемый список
def show(display_list):
    # Длина списка
    list_length = len(display_list)
    # Начальная фраза
    print(f"{list_length}D-вектор: <", end="")
    # Выводим элементы списка
    print(*display_list, sep="|", end="")
    # Финальная фраза
    print(">.")

# Функция для создания списка со случайными целочисленными элементами
# Аргумент функции - количество элементов в списке
def list_filling (size):
    # Создаем пустой список
    list_for_filling = []
    # Цикл для добавления новых элементов в конец списка
    for i in range(size):
        # Добавляем в конец списка новый элемент
        #  - случайное целое число в диапазоне от 0 до 6
        list_for_filling.append(random.randint(0, 6))
    # Возвращаем заполненный список
    return list_for_filling

# Функция для вычисления скалярного произведения двух векторов
# Аргумент функции - списки, на основе которых реализуются векторы
def scalar_product(a, b):
    # Длина первого списка
    size_a = len(a)
    # Длина второго списка
    size_b = len(b)
    # Наименьшее из двух значений
    size = min(size_a, size_b)

    # Начальное значение суммы
    total = 0
    # Оператор цилка для вычисления суммы
    for i in range(size):
        # Увеличиваем сумму на произведение одноименных элементов списков
        total += a[i] * b[i]
    # Возвращаем результат скалярного произведения двух векторов
    return total
# Инициализация генератора случайных чисел
random.seed(2014)
# Первый случайный вектор
a = list_filling(3)
# Второй случайный вектор
b = list_filling(6)

# Отображаем созданные векторы
show(a)
show(b)

# Вычисляем скалярное произведение
result = scalar_product(a, b)
# Отображаем результат вычисления
print("Скалярное произведение:", result)